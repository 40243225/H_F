<?
require_once '../fbsdk/src/Facebook/autoload.php';
session_start();
$bot_id = $_GET['id'];
$up     = new Update_AcessToken($bot_id);
$up->getAcessToken();
$id = $up->getUserID();
$up->SetTOMySQL($id);
class Update_AcessToken {
	protected $fb;
	protected $access_token;
	protected $mysqli;
	public $bot_id;
	function __construct($var1) {
		$this->fb = new Facebook\Facebook([
				'app_id'                => '134521967167442', // Replace {app-id} with your app id
				'app_secret'            => '900f15662dd99bc1e3e5ee61036a1963',
				'default_graph_version' => 'v2.11',
			]);
		$DBNAME       = "h_f";
		$DBUSER       = "root";
		$DBPASSWD     = "00000000";
		$DBHOST       = "localhost";
		$this->mysqli = new Mysqli($DBHOST, $DBUSER, $DBPASSWD, $DBNAME);
		if ($this->mysqli->connect_errno) {
			printf("Connect failed: %s\n", $mysqli->connect_error);
			exit();
		}
		$this->bot_id = $var1;
	}
	function getAcessToken() {
		$helper = $this->fb->getRedirectLoginHelper();
		try {
			$accessToken = $helper->getAccessToken();
		} catch (Facebook\Exceptions\FacebookResponseException $e) {
			// When Graph returns an error
			echo 'Graph returned an error: '.$e->getMessage();
			exit;
		} catch (Facebook\Exceptions\FacebookSDKException $e) {
			// When validation fails or other local issues
			echo 'Facebook SDK returned an error: '.$e->getMessage();
			exit;
		}

		if (!isset($accessToken)) {
			if ($helper->getError()) {
				header('HTTP/1.0 401 Unauthorized');
				echo "Error: ".$helper->getError()."\n";
				echo "Error Code: ".$helper->getErrorCode()."\n";
				echo "Error Reason: ".$helper->getErrorReason()."\n";
				echo "Error Description: ".$helper->getErrorDescription()."\n";
			} else {
				header('HTTP/1.0 400 Bad Request');
				echo 'Bad request';
			}
			exit;
		}
		$oAuth2Client  = $this->fb->getOAuth2Client();
		$tokenMetadata = $oAuth2Client->debugToken($accessToken);
		$tokenMetadata->validateAppId('134521967167442');
		$tokenMetadata->validateExpiration();
		if (!$accessToken->isLongLived()) {
			// Exchanges a short-lived access token for a long-lived one
			try {
				$accessToken = $oAuth2Client->getLongLivedAccessToken($accessToken);
			} catch (Facebook\Exceptions\FacebookSDKException $e) {
				echo "<p>Error getting long-lived access token: ".$helper->getMessage()."</p>\n\n";
				exit;
			}
			//var_dump($accessToken->getValue());
		}
		$_SESSION['fb_access_token'] = (string) $accessToken;
		$this->access_token          = (string) $accessToken;
		return $this->access_token;
	}
	function getUserID() {
		try
		{
			$response = $this->fb->get('/me', $this->access_token);
		}
		 catch (\Facebook\Exceptions\FacebookResponseException $e) {
			// When Graph returns an error
			echo 'Graph returned an error: '.$e->getMessage();
			exit;
		}
		 catch (\Facebook\Exceptions\FacebookSDKException $e) {
			// When validation fails or other local issues
			echo 'Facebook SDK returned an error: '.$e->getMessage();
			exit;
		}
		$me = $response->getGraphUser();
		$id = $me->getId();
		return $id;
	}
	function SetTOMySQL($id) {
		$sql    = "SELECT `FB_ID` FROM `member` WHERE `BOT_ID` LIKE '$this->bot_id'";
		$result = $this->mysqli->query($sql);
		$row    = $result->fetch_array(MYSQLI_NUM);
		$userid = $row[0];
		if (!strcmp($id, $userid)) {
			$date = date("Y-m-d", mktime(0, 0, 0, date("m"), date("d")+11, date("Y")));
			$sql  = "UPDATE `member` SET `AccessToken` = '$this->access_token', `expiration` = '$date' WHERE `member`.`FB_ID` = '$id'";
			if ($this->mysqli->query($sql)) {
				echo "更新權杖成功!!";
			} else {

				echo "failed";
			}
		} else {
			echo "登入的Facebook帳號與Messanger不同";
		}
	}
}
?>